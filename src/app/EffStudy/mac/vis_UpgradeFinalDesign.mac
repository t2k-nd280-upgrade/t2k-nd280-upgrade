# Macro file for the initialization phase of "exampleN02.cc"
# when runing in interactive mode

# Sets some default verbose
/control/verbose 1
/run/verbose 1
#/tracking/verbose 2 # print many physics informations about each step (daughters,...)

# Set the physics list
#/physlist/usePAIModel true
#/physlist/setHadronicPhysList QGSP_BERT

# Particle Max Step Size 
/testem/stepMax 1.0 mm

# Set the magnetic field
/field/setStepperType 4
/field/setMinStep 0.1 mm
/field/setField 0.2 0 0 tesla
/field/update




### NEW
# Set nd280mc visible detectors 
#/t2k/Basket/DsECal/visible 1
#/t2k/Basket/DsECal/visibleDaughters 1
#/t2k/Basket/DsECal/Module/Active/ScintHoriz/Bar/visible 1
#/t2k/Basket/DsECal/Module/Active/ScintHoriz/Bar/visibleDaughters 1
#/t2k/Basket/DsECal/Module/Active/ScintHoriz/visible 1
#/t2k/Basket/DsECal/Module/Active/ScintHoriz/visibleDaughters 1
#/t2k/Basket/DsECal/Module/Active/ScintVert/Bar/visible 1
#/t2k/Basket/DsECal/Module/Active/ScintVert/Bar/visibleDaughters 1
#/t2k/Basket/DsECal/Module/Active/ScintVert/visible 1
#/t2k/Basket/DsECal/Module/Active/ScintVert/visibleDaughters 1
####

# Set geometry
#/N02/det/setTargetMate1 FGDScintillator
#/N02/det/setTargetMate2 FGD2Uniform #ActiveWater

# Test geometry (overlaps...)
/geometry/test/run


# Set the particle generator: "Generator" (NEUT or GENIE is not specified here) or "ParticleGun"
/generator/type Generator
#/generator/type ParticleGun
		
# Set the particle gun 
/gun/particle mu-
/gun/energy 600 MeV  # kinetic energy
/gun/direction 0 1 0 # momentum direction
/gun/position 0 0 0  # starting position
/gun/number   1      # number of particles

# Use this open statement to create an OpenGL view:
# /vis/open OGL 600x600-0+0

# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
# /vis/open DAWNFILE

# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile

# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
/vis/open VRML2FILE

# Use this open statement to create a .jpeg file suitable for
# viewing in RayTracer:
/vis/open RayTracer

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

# Draw geometry:
/vis/drawVolume

# Specify view angle:
#/vis/viewer/set/viewpointThetaPhi 90. 180.
/vis/viewer/set/viewpointThetaPhi 0. 0.

# Specify zoom value:
/vis/viewer/zoom 1.4

# Specify style (surface or wireframe):
#/vis/viewer/set/style wireframe

# Draw coordinate axes:
/vis/scene/add/axes 1 1 1 1 m

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts false #true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)

# Draw hits at end of event:
#/vis/scene/add/hits

# To draw only gammas:
/vis/filtering/trajectories/create/particleFilter
/vis/filtering/trajectories/particleFilter-0/add gamma

# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
/vis/filtering/trajectories/particleFilter-0/invert true

# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue

# To superimpose all of the events from a given run:
#/vis/scene/endOfEventAction accumulate

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush

#/run/beamOn 99999999 #1 #19553 #10 #40 #1915 # Set in Main.cc