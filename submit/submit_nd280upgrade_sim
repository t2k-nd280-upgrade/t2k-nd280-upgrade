#!/usr/bin/perl


#-------------------------------------------------------------------------------------------------------------------------------
# Submit a GEANT4 simulation job
#
# Inputs
#  --resource               : Computer resource. Default: interactive.
#  --tag                    : Tag for output files.
#  --config-file            : Analysis configuration file from the config/ directory.
#
#  --cpu-time               : Required CPU time. 
#  --job-dir                : Directory for job scripts and outputs. Default: `pwd`.
#  --softw-dir              : code top-level directory. 
# D.Sgalaberna
#-------------------------------------------------------------------------------------------------------------------------------
#


use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}
    
    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cpu-time'         ) { $cput            = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }
    elsif($_ eq '--config'           ) { $config_file     = $ARGV[$iarg+1]; }
    elsif($_ eq '--vis-file'         ) { $vis_file        = $ARGV[$iarg+1]; }
    elsif($_ eq '--first-expt'       ) { $first_expt      = $ARGV[$iarg+1]; }
    elsif($_ eq '--nexpts'           ) { $nexpts          = $ARGV[$iarg+1]; }
    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }
    elsif($_ eq '--exe-clust-dir'    ) { $exe_clust_dir   = $ARGV[$iarg+1]; }
    elsif($_ eq '--exe-loc-dir'      ) { $exe_loc_dir     = $ARGV[$iarg+1]; }
 
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$exe_clust_dir 		= "bin/"											unless defined $exe_clust_dir; # path starting from $softw_dir
$exe_loc_dir 			= "build/app/EffStudy/" 			unless defined $exe_loc_dir; # path starting from $softw_dir

$resource        	= "interactive"               unless defined $resource;

$tag             	= "test" unless defined $tag;
$config_file     	= "config/configuration_cluster_ref_sfgdonly.xml" unless defined $config_file;
$vis_file        	= "mac/vis_pgun.mac"          unless defined $vis_file;
$nruns           	= 1                          	unless defined $nruns;      # number of jobs
$nexpts          	= 100                        	unless defined $nexpts;     # number of events per job 

$first_expt      	= 0                           unless defined $first_expt; # first event

$queue           = "sx"                					unless defined $queue;

if($resource eq "parallel"){
    open(par_file, ">$job_dir/commands_sim.sh") or die("Can not create the sbatch script");
    print par_file "#!/bin/bash -l  \n";
}

$irun = 0;
while($irun < $nruns) { # loop over the jobs
    
    $evt_first = $first_expt + $irun * $nexpts;
    
		$arguments = "$softw_dir/$exe_loc_dir/EffStudyApp $softw_dir/src/app/EffStudy/$vis_file $softw_dir/src/app/EffStudy/$config_file $job_dir/$tag-Exp$evt_first-Nexpt$nexpts $evt_first $nexpts";
     
    $command = "$arguments";
    $command .= "; mv EffStudy_0.root EffStudy_";
    $file_name = $irun + 1;
    $command .= "$file_name.root";
    
    print "\n";
    print "Job $irun \n";
    print "First event: $evt_first \n";
    print "# of events: $nexpts \n";
    print "$command \n";
    print "\n////////////////////////////// \n\n";

    ################################### Submit the job ##################################
    
    #
    # UNIGE (Atlas cluster), $job_dir not used, $tag gives path/name of output file
    #
    if($resource eq "UNIGE-Atlas") {

	$sbatchfile = "$job_dir/$tag-$evt_first-$nexpts.sbatch";
	$outfiledir = "$job_dir/";
	$errfiledir = "$job_dir/";
	#open(PBS, ">$job_dir/$tag-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	open(PBS, ">$sbatchfile") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.sh $softw_dir \n";
	print PBS "\n";
	print PBS "env \n";
	print PBS "\n";
	print PBS "uname -n \n";
	print PBS "\n";
	print PBS "$command \n";
	close(PBS);	
	`qsub -q $queue -l mem=6000mb -l vmem=6000mb $sbatchfile`;	
    }
    
    if($resource eq "UNIGE-Atlas-Slurm") {

	#print "Use SLURM \n";

	#$queue = "rhel6-$queue"; # Correct SLURM queue, rhel-short, not short!
	#print "$queue \n";
	
	$sbatchfile = "$job_dir/$tag-$evt_first-$nexpts.sbatch";
	$outfile = "$job_dir/$tag-$evt_first-$nexpts-%j.out";
	$errfile = "$job_dir/$tag-$evt_first-$nexpts-%j.err";
	#open(PBS, ">$job_dir/$tag-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	open(PBS, ">$sbatchfile") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "#SBATCH --time=00:25:00 \n";

	#print PBS "#SBATCH --partition=$queue --mem-per-cpu=6000  \n"; # in MB. Same as dphys_largemem default RAM                           
	print PBS "#SBATCH --partition=$queue  \n"; # in MB. Same as dphys_largemem default RAM                           
	print PBS "#SBATCH --mem-per-cpu=6000  \n"; # in MB. Same as dphys_largemem default RAM                           

	print PBS "#SBATCH --nodes=1  \n";
	print PBS "#SBATCH --ntasks-per-node=1  \n";
	print PBS "#SBATCH --output=$outfile  \n";
	print PBS "#SBATCH --error=$errfile  \n";
	#print PBS "#SBATCH --jobname=myJob \n";
	#print PBS "echo \$SLURM_JOB_NODELIST \n"; # print the node  number                                                                                          
	print PBS "source $softw_dir/T2KND280Up_CLHEP.sh $softw_dir \n";
	print PBS "$command \n";
	close(PBS);
	`sbatch $sbatchfile`;
	#`sbatch -t 07:00:00 $sbatchfile`;	
    }

    if($resource eq "KEKCC") {
	$sbatchfile = "$job_dir/$tag-$evt_first-$nexpts.sbatch";
	open(PBS, ">$sbatchfile") or die("Can not create the sbatch script");
	print PBS "#!/bin/csh \n";
	print PBS "cd $job_dir  \n";
	print PBS "source T2KND280Up_CLHEP.csh \n";
	print PBS "cd $job_dir  \n";
	print PBS "\n";
	print PBS "env \n";
	print PBS "\n";
	print PBS "uname -n \n";
	print PBS "\n";
	print PBS "$command \n";
	close(PBS);
	`chmod 765 $sbatchfile`;
	`bsub -q $queue $sbatchfile`;
    }
    
    if($resource eq "interactive") {
    	print "$command";
			system($command);
    }

    if($resource eq "parallel") {
        print par_file "#!/bin/bash -l  \n";
        print par_file "$command; echo \"job $irun from $nruns done\" \n";
        print "Parallel\n";
        print "$command\n";
    }




    $irun=$irun+1;
} # end loop over jobs

if($resource eq "parallel") {
    close(par_file);
    $run_command = "nice -n19 parallel -j 15 -a $job_dir/commands_sim.sh";
    print "running parallel \n";
    system($run_command);
    unlink "$job_dir/commands_sim.sh";
}
